<?php
/**
 *
 * User: jinyanxin
 * Date: 2020/4/24
 * Time: 10:19
 * 基础
 */

namespace common\models;


use Yii;
use yii\db\ActiveRecord;

class BaseModel extends ActiveRecord
{
    const HOUSE_ID = 1;//仓库id

    const INT_MAX=2147483647;//int最大值

    const LEAVE_TYPE_ONE = 1;
    const LEAVE_TYPE_TWO = 2;
    const LEAVE_TYPE_SAN = 3;
    const LEAVE_TYPE_SI = 4;

    public static $LEAVE_TYPE_ENUM = [
        self::LEAVE_TYPE_ONE => '自离',
        self::LEAVE_TYPE_TWO => '辞职',
        self::LEAVE_TYPE_SAN => '辞退',
        self::LEAVE_TYPE_SI => '转正'
    ];

    const IS_VALID_OK = 0;      //未删除
    const IS_VALID_NO = 1;      //已删除

    const SEX_MAN = 1;
    const SEX_WOMAN = 0;
    const SEX_UNLIMITED = 2;

    public static $SEX_ENUM = [
        self::SEX_MAN=>'男',
        self::SEX_WOMAN=>'女',
        self::SEX_UNLIMITED=>'不限',

    ];

    CONST EDUCATION_ONE = 1;
    CONST EDUCATION_TWO = 2;
    CONST EDUCATION_SAN = 3;
    CONST EDUCATION_SI = 4;
    CONST EDUCATION_WU = 5;
    CONST EDUCATION_LIU = 6;
    CONST EDUCATION_QI = 7;
    CONST EDUCATION_EIGHT = 8;

    public static $EDUCATION_ENUM = [
        self::EDUCATION_ONE => '初中及以下',
        self::EDUCATION_TWO => '中专/中技',
        self::EDUCATION_SAN => '高中',
        self::EDUCATION_SI => '大专',
        self::EDUCATION_WU => '本科',
        self::EDUCATION_LIU => '硕士',
        self::EDUCATION_QI => '博士',
        self::EDUCATION_EIGHT => '不限',
    ];

    public static function getById($id,$isArr = true)
    {
        $info = self::find()->where(['id' => $id,'isValid' => self::IS_VALID_OK]);
        if($isArr === true){
            $info->asArray();
        }
        return $info->one();
    }

    public function beforeSave($insert)
    {
        $createUser = '';
        $updateUser = '';
        if(Yii::$app->id === 'app-console'){
            $createUser = $updateUser = 'console';
        }else{
            if(!Yii::$app->user->isGuest){
                $createUser = $updateUser = Yii::$app->user->identity['userAccount'];
            }
        }

        if ($this->isNewRecord){
            $this->createTime = date('Y-m-d H:i:s');
            $this->updateTime = date('Y-m-d H:i:s');
            $this->creator = $createUser;
            $this->updater = $updateUser;
            $this->isValid = self::IS_VALID_OK;
        }else{
            $this->updater = $updateUser;
            $this->updateTime = date('Y-m-d H:i:s');
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    /**
     * @duty 将金额转为分为单位
     * @param float $amount
     * @return integer
     */
    public static function amountToCent($amount){
        return intval(round(floatval($amount) * 100000));
    }

    /**
     * @duty 将金额转为元为单位,并保留两位小数
     * @param integer $amount
     * @return float
     */
    public static function amountToYuan($amount){
        $float = sprintf("%.5f",$amount/100000);
        return  floatval($float);
//        return  sprintf("%.5f",$amount/100000);
    }

    /**
     * 生成一个编号
     *
     * */
    public static function getNumber($prefix)
    {
        $pattern = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $sno = substr($pattern,mt_rand(1,23),2).mt_rand(10,99).date('his');
        return $prefix.$sno;
    }

//分页查询
    public static function getPage($page = 0, $pageSize = 0, $select = ['*'], $andWhere = [],
                                   $asArray = false, $orderBy = '', $indexBy = '', $groupBy = '')
    {
        $model = self::find()
            ->select($select)
            ->Where([ 'isValid' => self::IS_VALID_OK ]) ;
        if ( !empty($andWhere) && is_array($andWhere) ) {
            foreach ($andWhere as $item) {
                $model->andWhere($item) ;
            }
        }
        if(!empty($pageSize)) {
            $offset = intval(($page - 1) * $pageSize) ;
            $model = $model->offset($offset)->limit(intval($pageSize)) ;
        }
        if(!empty($orderBy)) {
            $model = $model->orderBy($orderBy) ;
        }
        if(!empty($indexBy)) {
            $model = $model->indexBy($indexBy) ;
        }
        if(!empty($groupBy)) {
            $model = $model->groupBy($groupBy) ;
        }
        $count = $model->count() ;
        if ($asArray){
            $model->asArray() ;
        }
        $data = $model->all() ;
        return ['list' => $data, 'count' => $count] ;
    }

    //查询所有
    public static function getAll($select = ['*'], $andWhere = [], $asArray = false,
                                  $orderBy = '', $indexBy = '', $groupBy = '')
    {
        $model = self::find()
            ->select($select)
            ->Where([ 'isValid' => self::IS_VALID_OK ]) ;
        if ( !empty($andWhere) && is_array($andWhere) ) {
            foreach ($andWhere as $item) {
                $model->andWhere($item) ;
            }
        }
        if(!empty($orderBy)) {
            $model = $model->orderBy($orderBy) ;
        }
        if(!empty($indexBy)) {
            $model = $model->indexBy($indexBy) ;
        }
        if(!empty($groupBy)) {
            $model = $model->groupBy($groupBy) ;
        }
        if ($asArray){
            $model->asArray() ;
        }
        $data = $model->all() ;
        return ['list' => $data ] ;
    }


}